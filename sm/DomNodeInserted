//기존에 사용하던 DOMNodeInserted는 DOM변경이 있을때 사용하던 이벤트로 DOMSubtreeModifed, DOMNodeRemoved 등이 있음
//2024년 7월부터 정식지원하지않아 해당 메서드가 Class를 뿌려주는 기능이 작동되지않음
//설계상 구조결함이나 성능적으로도 DOMNodeInserted보다는 MutationObserver 사용하는게 Good.
//또한 최신 브라우저를 사용하는 유저의 경우 해당 메서드가 작동안해서 CSS가 다 깨질 수 있음



//기존 형태
//class 자동 뿌려주는 함수
function btnclassSetting(){
	$('[class^=b-]').addClass('btn btn-default');//쓰기,등록
	$('.b-reg').addClass('btn-primary');//쓰기,등록
	$('.b-del').addClass('btn-danger');//삭제
	$('.b-cancel').addClass('btn-default');//취소
	$('.b-end').addClass('btn-warning');//취소
	$('.b-edit').addClass('btn-success');//수정
	$('.b-list').addClass('btn-default');//목록
	$('.b-move').addClass('btn-warning');//이동
	$('.b-reply').addClass('btn-primary');//답글
	$('.b-sh').addClass('btn-default');//검색
	$('.b-sh2').addClass('btn-default');//검색
	$('.b-ok').addClass('btn-info');//확인
	$('.b-down').addClass('btn-success');//확인
	$('.b-reset').addClass('btn-warning');//확인
	$('.b-add').addClass('btn-success');//확인
	$('.b-apply2').addClass('btn-success btn-lg');//확인
	$('.b-view').addClass('btn-info');//보기,미리보기
	$('.b-hide').addClass('btn-info');//숨김
	$('.b-back').addClass('btn-default');//보기,미리보기
	$('.b-save').addClass('btn-success');//보기,미리보기
	$('.b-end').addClass('btn-danger');//종료
	$('.b-set').addClass('btn-info');//종료
	$('.b-open').addClass('btn-success');//종료
	$('.b-select').addClass('btn-success');//종료
	$('.b-pop').addClass('btn-success');//종료
	$('.b-login').addClass('btn-success');//로그인
	$('.b-disabled').addClass('btn-warning');//비활성
	$('.b-unlock').addClass('btn-success');//잠금해제
}

//DOM에 Node가 삽입될때마다 호출, 자원적부담 + 미지원이슈
$(document).on('DOMNodeInserted', function(event) {
	btnclassSetting();
});

//수정
function observeDOMChanges() {
    const targetNode = document.body;
    //대상노드(targetNode)가 유효할시
    if (targetNode) {
        //childList : 자식 노드의 추가 및 제거를 감지(true)
        //subtree : 대상 노드의 하위 노드에서도 변화를 감지(true)
        const config = { childList: true, subtree: true };

        //MutationObserver가 변화 감지시 호출
        const callback = function(mutationsList) {
            //발생한 모든 변화에 대한 배열
            for (const mutation of mutationsList) {
                //해당 타입이 childList일때만 호출
                if (mutation.type === 'childList') {
                    btnclassSetting();
                }
            }
        };
        //MutationObserver 인스턴스 생성
        const observer = new MutationObserver(callback);
        //감시하고자 하는 dom을 MutationObserver 인스턴스에 등록할 수 있다.
        observer.observe(targetNode, config);
    } else {
        console.error('targetNode값이 유효하지 않음');
    }
}

//DOMContentLoaded 완전히 로드 후 실행
document.addEventListener('DOMContentLoaded', function() {
    //로드시 btnclassSetting 함수를 호출
    btnclassSetting();
    //DOM 변화를 감지하도록 설정
    observeDOMChanges();
});






